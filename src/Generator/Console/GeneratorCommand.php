<?php
/**
 * @Author yaangvu
 * @Date   Sep 07, 2022
 */

namespace YaangVu\LaravelBase\Generator\Console;

use Illuminate\Console\GeneratorCommand as BaseGeneratorCommand;
use Illuminate\Contracts\Filesystem\FileNotFoundException;
use Illuminate\Support\Arr;
use Illuminate\Support\Carbon;
use Illuminate\Support\Str;
use JetBrains\PhpStorm\ArrayShape;

abstract class GeneratorCommand extends BaseGeneratorCommand
{
    #[ArrayShape(['first' => "mixed", 'last' => "mixed", 'hasSub' => "bool", 'subLevel' => "int"])]
    protected array $arrName = [];
    private string $rootNamespace = 'Domains\\';

    public function handle()
    {
        $this->arrName = $this->parseNameInput($this->getNameInput());

        return parent::handle(); // TODO: Change the autogenerated stub
    }

    /**
     * @Description Parse Name input to array
     *
     * @Author      yaangvu
     * @Date        Jan 17, 2022
     *
     * @param string $name
     *
     * @return array
     */
    #[ArrayShape(['first' => "mixed", 'last' => "mixed", 'hasSub' => "bool", 'subLevel' => "int"])]
    final function parseNameInput(string $name): array
    {
        if (count($this->arrName))
            return $this->arrName;

        $name    = str_replace('/', '\\', $name);
        $name    = str_replace(Str::studly($this->type), '', $name);
        $name    = trim($name, '\\/');
        $arrName = explode('\\', $name);

        return [
            'first'    => Str::studly(Arr::first($arrName)),
            'last'     => Str::studly(Arr::last($arrName)),
            'hasSub'   => count($arrName) > 1,
            'subLevel' => count($arrName)
        ];
    }

    /**
     * @inheritDoc
     *
     * @Example /Type/Controllers/Type. You have to add extension to /Type/Controllers/TypeController.php
     *
     * @Author  yaangvu
     * @Date    Sep 14, 2022
     *
     * @param $name
     *
     * @return string
     */
    protected function getPath($name)
    {
        $arrName = $this->arrName;

        $path = $this->rootNamespace() . '\\'
                . Str::pluralStudly($this->type) . '\\'
                . $this->arrName['last'];
        $path = str_replace('\\', '/', $path);

        return $this->laravel->basePath($path)
               . ($this->type === 'Model' ? '' : $this->type)
               . '.php';
    }

    /**
     * @inheritDoc
     */
    final function rootNamespace(): string
    {
        return parent::rootNamespace() . $this->rootNamespace . $this->arrName['first'];
    }

    /**
     * @inheritDoc
     *
     * @Author yaangvu
     * @Date   Sep 22, 2022
     *
     * @param $name
     *
     * @return string
     */
    protected function qualifyClass($name)
    {
        return $this->getDefaultNamespace($this->rootNamespace()) . "\\" . $this->arrName['last'] . $this->type;
    }

    /**
     * @inheritDoc
     *
     * @Author yaangvu
     * @Date   Sep 22, 2022
     *
     * @param $name
     *
     * @return string
     * @throws FileNotFoundException
     */
    protected function buildClass($name)
    {
        $replace = $this->buildDateReplacements();

        return str_replace(
            array_keys($replace), array_values($replace), parent::buildClass($name)
        );
    }

    /**
     * Build the date replacement values
     *
     * @Author yaangvu
     * @Date   Sep 21, 2022
     *
     * @param array $replace
     *
     * @return array|string[]
     */
    protected function buildDateReplacements(array $replace = [])
    {
        return array_merge($replace, ['DummyDate' => Carbon::now()->toFormattedDateString()]);
    }

    /**
     * Build service replacements
     *
     * @Author yaangvu
     * @Date   Sep 21, 2022
     *
     * @param array $replace
     *
     * @return array|string[]
     */
    protected function buildServiceReplacements(array $replace = [])
    {
        $serviceClass = $this->parseService($this->option('service'));

        if ($this->option('service') && !class_exists($serviceClass) &&
            $this->components->confirm("A $serviceClass service does not exist. Do you want to generate it?", true)) {
            $this->call('yaangvu:service',
                        [
                            'name'    => $this->arrName['first'] . '/' . $this->arrName['last'],
                            '--model' => true
                        ]);
        }

        $serviceClass     = $this->arrName['last'] . 'Service';
        $serviceNamespace = $this->rootNamespace() . '\\'
                            . 'Services' . '\\'
                            . $serviceClass;

        return array_merge($replace,
                           [
                               'ServiceNamespace' => $serviceNamespace,
                               'ServiceClass'     => $serviceClass
                           ]);
    }

    /**
     * Get the fully-qualified model class name.
     *
     * @param string $model
     *
     * @return string
     *
     * @throws InvalidArgumentException
     */
    protected function parseService(string $service): string
    {
        if (preg_match('([^A-Za-z0-9_/\\\\])', $service)) {
            throw new InvalidArgumentException('Model name contains invalid characters.');
        }

        return $this->qualifyService($service);
    }

    /**
     * Qualify the given service class base name.
     *
     * @Author yaangvu
     * @Date   Sep 22, 2022
     *
     * @param string $service
     *
     * @return string
     */
    protected function qualifyService(string $service)
    {
        return $this->rootNamespace() . '\\Services\\' . $this->arrName['last'] . 'Service';
    }

    /**
     * Build the model replacement values.
     *
     * @Author yaangvu
     * @Date   Sep 21, 2022
     *
     * @param array $replace
     *
     * @return array
     */
    protected function buildModelReplacements(array $replace): array
    {
        $modelClass = $this->parseModel($this->option('model'));

        if ($this->option('model') && !class_exists($modelClass) &&
            $this->components->confirm("A $modelClass model does not exist. Do you want to generate it?", true)) {
            $this->call('yaangvu:model', ['name' => $this->arrName['first'] . '/' . $this->arrName['last']]);
        }

        return array_merge($replace, [
            'DummyFullModelClass'   => $modelClass,
            '{{ namespacedModel }}' => $modelClass,
            '{{namespacedModel}}'   => $modelClass,
            'DummyModelClass'       => class_basename($modelClass),
            '{{ model }}'           => class_basename($modelClass),
            '{{model}}'             => class_basename($modelClass),
            'DummyModelVariable'    => lcfirst(class_basename($modelClass)),
            '{{ modelVariable }}'   => lcfirst(class_basename($modelClass)),
            '{{modelVariable}}'     => lcfirst(class_basename($modelClass)),
        ]);
    }

    /**
     * Get the fully-qualified model class name.
     *
     * @param string $model
     *
     * @return string
     *
     * @throws InvalidArgumentException
     */
    protected function parseModel(string $model): string
    {
        if (preg_match('([^A-Za-z0-9_/\\\\])', $model)) {
            throw new InvalidArgumentException('Model name contains invalid characters.');
        }

        return $this->qualifyModel($model);
    }

    /**
     * @inheritDoc
     *
     * @Author yaangvu
     * @Date   Sep 21, 2022
     */
    protected function qualifyModel(string $model)
    {
        return $this->rootNamespace() . '\\Models\\' . $this->arrName['last'];
    }
}
